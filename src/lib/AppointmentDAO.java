package lib;

import javafx.scene.control.Alert;
import lib.DBConnection;
import model.Appointment;

import java.sql.*;
import java.time.ZoneId;
import java.time.ZonedDateTime;

/**
 * DAO For Appointment
 */
public class AppointmentDAO {

  /**
   * Creates a new appointment
   * @param localEndTimestamp local time for end
   * @param localStartTimestamp local time for start
   * @param newId new id of appointment autogenerated
   * @param titleFieldText title
   * @param descriptionFieldText description
   * @param locationFieldText location
   * @param typeFieldText type
   * @param contactId contact id
   * @param utcStartTime utc
   * @param utcEndTime utc
   * @param current_date current date
   * @param created_by who created it
   * @param last_updated_by last updated time
   * @param customerId the customer id
   * @param userId the id
   * @return new appointment
   * @throws SQLException exception
   */
  public static Appointment createAppointment(int newId,
                                              String titleFieldText,
                                              String descriptionFieldText,
                                              String locationFieldText,
                                              String typeFieldText,
                                              Timestamp localEndTimestamp,
                                              Timestamp localStartTimestamp,
                                              Timestamp current_date,
                                              int contactId,
                                              Timestamp utcStartTime,
                                              Timestamp utcEndTime,
                                              String created_by,
                                              String last_updated_by,
                                              int customerId,
                                              int userId) throws SQLException {
    String request = "INSERT INTO appointments VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    PreparedStatement insert = DBConnection.open().prepareStatement(request);
    insert.setInt(1, newId);
    insert.setString(2, titleFieldText);
    insert.setString(3, descriptionFieldText);
    insert.setString(4, locationFieldText);
    insert.setString(5, typeFieldText);
    insert.setTimestamp(6, localStartTimestamp);
    insert.setTimestamp(7, localEndTimestamp);
    insert.setTimestamp(8, current_date);
    insert.setString(9, created_by);
    insert.setTimestamp(10, current_date);
    insert.setString(11, last_updated_by);
    insert.setInt(12, customerId);
    insert.setInt(13, 1);
    insert.setInt(14, contactId);
    try (var ps = insert) {
      ps.executeUpdate();
    }
    Appointment appointment = new Appointment(newId, titleFieldText, descriptionFieldText, locationFieldText, typeFieldText, contactId, utcStartTime, utcEndTime, current_date, "created_by", current_date, "last_updated_by", customerId, userId);
    appointment.setLocalStart(localStartTimestamp);
    appointment.setLocalEnd(localEndTimestamp);
    appointment.setFormattedLocalStart(localStartTimestamp);
    appointment.setFormattedLocalEnd(localEndTimestamp);

    DBConnection.close();

    return appointment;
  }

  /**
   * Validates appointment if it is in an available time
   * @param utcStart the start time
   * @param utcEnd the end time
   * @param customerId id of who created it
   * @param appointmentId specific appointment
   * @return true or false
   * @throws SQLException
   */
  public static boolean validate(Timestamp utcStart, Timestamp utcEnd, int customerId, int appointmentId) throws SQLException {
    ZonedDateTime UtcStart = ZonedDateTime.of(utcStart.toLocalDateTime(), ZoneId.of("UTC"));
    ZonedDateTime UtcEnd = ZonedDateTime.of(utcEnd.toLocalDateTime(), ZoneId.of("UTC"));

    String sql = "SELECT * FROM appointments WHERE Customer_ID = '"+customerId+"' AND Appointment_ID != '"+appointmentId+"';";
    Statement stmtOne = DBConnection.open().createStatement();
    ResultSet resultOne = stmtOne.executeQuery(sql);
    String start = "";
    String end = "";
    while (resultOne.next()) {
      start = resultOne.getString("Start");
      end = resultOne.getString("End");
      ZonedDateTime UTCCustomerStart = ZonedDateTime.of(Timestamp.valueOf(start).toLocalDateTime(), ZoneId.of("UTC"));
      ZonedDateTime UTCCustomerEnd = ZonedDateTime.of(Timestamp.valueOf(end).toLocalDateTime(), ZoneId.of("UTC"));
      if ( UtcStart.compareTo(UTCCustomerStart) < 1 && UtcEnd.compareTo(UTCCustomerEnd)  < 1) {
        DBConnection.close();
        return false;
      }
    }
    DBConnection.close();
    return true;
  }

}
